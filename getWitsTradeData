import requests
import pandas as pd
import time
from datetime import datetime

def get_wits_trade_data(reporter="USA", year=2022, trade_flow="all"):
    """
    Fetch trade data from WITS API for USA with all trading partners
    
    Parameters:
    - reporter: Country code for the reporting country (default: USA)
    - year: Year for which to fetch data (default: most recent available)
    - trade_flow: Type of trade flow (all, exports, imports)
    
    Returns:
    - DataFrame with trade data
    """
    base_url = "http://wits.worldbank.org/API/V1/SDMX/V21/rest/data/df_wits_tradestats_trade"
    
    # Determine trade flow parameter
    if trade_flow.lower() == "exports":
        flow_param = "X"
    elif trade_flow.lower() == "imports":
        flow_param = "M"
    else:
        flow_param = "all"  # Both exports and imports
    
    # Construct API URL
    url = f"{base_url}/{flow_param}.{reporter}.all.all.{year}"
    
    # Make the request
    print(f"Fetching trade data for {reporter} in {year}...")
    response = requests.get(url)
    
    if response.status_code != 200:
        print(f"Error: API returned status code {response.status_code}")
        print(f"Response: {response.text}")
        return None
    
    # Process the XML response
    try:
        # This API returns SDMX-ML format (XML), so we'll extract the relevant data
        data = response.text
        
        # For large XML responses, using a proper XML parser would be more robust
        # This is a simple approach that works for demonstration purposes
        # In production, consider using ElementTree or lxml
        
        # Convert to DataFrame (simplified approach)
        # In practice, you would parse the XML properly
        df = pd.DataFrame({
            "response_data": [data],
            "url": [url],
            "status_code": [response.status_code]
        })
        
        return df
    except Exception as e:
        print(f"Error processing data: {e}")
        return None

def get_wits_tariff_data(reporter="USA", year=2022, partner="all"):
    """
    Fetch tariff data from WITS API for a country
    
    Parameters:
    - reporter: Country code for the tariff-imposing country (default: USA)
    - year: Year for which to fetch tariff data
    - partner: Partner country (default: all)
    
    Returns:
    - DataFrame with tariff data
    """
    base_url = "http://wits.worldbank.org/API/V1/SDMX/V21/rest/data/df_wits_simplemfn"
    
    # Construct API URL
    url = f"{base_url}/{reporter}.{partner}.all.{year}"
    
    # Make the request
    print(f"Fetching tariff data for {reporter} with partner {partner} in {year}...")
    response = requests.get(url)
    
    if response.status_code != 200:
        print(f"Error: API returned status code {response.status_code}")
        print(f"Response: {response.text}")
        return None
    
    # Process the XML response
    try:
        # This API returns SDMX-ML format (XML)
        data = response.text
        
        # Convert to DataFrame (simplified approach)
        df = pd.DataFrame({
            "response_data": [data],
            "url": [url],
            "status_code": [response.status_code]
        })
        
        return df
    except Exception as e:
        print(f"Error processing data: {e}")
        return None

def get_all_country_partners():
    """
    Get a list of all country codes from WITS API
    
    Returns:
    - List of country codes
    """
    url = "http://wits.worldbank.org/API/V1/wits/datasource/tradestats-trade/country/ALL"
    
    response = requests.get(url)
    
    if response.status_code != 200:
        print(f"Error: API returned status code {response.status_code}")
        return ["WLD"]  # World as fallback
    
    # Parse the country codes from the response
    try:
        data = response.json()
        countries = [country['iso3Code'] for country in data]
        return countries
    except Exception as e:
        print(f"Error processing country list: {e}")
        return ["WLD"]  # World as fallback

def save_to_csv(df, filename):
    """Save DataFrame to CSV file"""
    df.to_csv(filename, index=False)
    print(f"Data saved to {filename}")

def main():
    # Get the current year
    current_year = datetime.now().year
    # Use previous year as default since current year data might not be complete
    default_year = current_year - 1
    
    print(f"WITS World Bank Trade & Tariff Data Downloader")
    print(f"==============================================")
    
    # Get user inputs with defaults
    reporter = input(f"Enter reporter country code (default: USA): ") or "USA"
    year = input(f"Enter year (default: {default_year}): ") or default_year
    try:
        year = int(year)
    except ValueError:
        print(f"Invalid year, using default: {default_year}")
        year = default_year
    
    # Ask if user wants trade data, tariff data, or both
    data_type = input("Enter data type (trade, tariff, or both) (default: both): ").lower() or "both"
    
    # Ask if user wants specific partners or all countries
    partner_input = input("Enter partner country code(s) separated by commas, or 'all' for all countries (default: all): ").lower() or "all"
    
    if partner_input == "all":
        partners = get_all_country_partners()
        print(f"Found {len(partners)} partner countries")
    else:
        partners = [p.strip().upper() for p in partner_input.split(",")]
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    if data_type in ["trade", "both"]:
        # Create a list to store results
        trade_results = []
        
        # Get trade data for each partner
        for partner in partners:
            try:
                # Option 1: Get imports from partner to reporter
                df_imports = get_wits_trade_data(reporter=reporter, year=year, trade_flow="imports")
                if df_imports is not None:
                    df_imports["partner"] = partner
                    df_imports["flow"] = "imports"
                    trade_results.append(df_imports)
                
                # Option 2: Get exports from reporter to partner
                df_exports = get_wits_trade_data(reporter=reporter, year=year, trade_flow="exports")
                if df_exports is not None:
                    df_exports["partner"] = partner
                    df_exports["flow"] = "exports"
                    trade_results.append(df_exports)
                
                # Add a small delay to avoid hitting rate limits
                time.sleep(0.5)
            except Exception as e:
                print(f"Error processing partner {partner}: {e}")
        
        # Combine all results
        if trade_results:
            all_trade_data = pd.concat(trade_results, ignore_index=True)
            trade_filename = f"wits_trade_data_{reporter}_{year}_{timestamp}.csv"
            save_to_csv(all_trade_data, trade_filename)
    
    if data_type in ["tariff", "both"]:
        # Create a list to store results
        tariff_results = []
        
        # Get tariff data for each partner
        for partner in partners:
            try:
                df_tariff = get_wits_tariff_data(reporter=reporter, year=year, partner=partner)
                if df_tariff is not None:
                    df_tariff["partner"] = partner
                    tariff_results.append(df_tariff)
                
                # Add a small delay to avoid hitting rate limits
                time.sleep(0.5)
            except Exception as e:
                print(f"Error processing partner {partner} tariff data: {e}")
        
        # Combine all results
        if tariff_results:
            all_tariff_data = pd.concat(tariff_results, ignore_index=True)
            tariff_filename = f"wits_tariff_data_{reporter}_{year}_{timestamp}.csv"
            save_to_csv(all_tariff_data, tariff_filename)
    
    print("Data collection complete!")
    print("Note: The data is in SDMX-ML format. You will need to parse this XML data for further analysis.")
    print("For detailed documentation on the format, visit: https://wits.worldbank.org/data/public/WITS_API_Documentation.pdf")

if __name__ == "__main__":
    main()
